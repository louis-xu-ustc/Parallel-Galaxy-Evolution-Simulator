!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APIENTRY	glfw.h	/^  #define APIENTRY /;"	d
APIENTRY	glfw.h	/^  #define APIENTRY$/;"	d
BORDER	build_config.h	/^#define BORDER /;"	d
BlueBits	glfw.h	/^    int RedBits, BlueBits, GreenBits;$/;"	m	struct:__anon6
BytesPerPixel	glfw.h	/^    int BytesPerPixel;$/;"	m	struct:__anon7
CALLBACK	glfw.h	/^   #define CALLBACK /;"	d
CALLBACK	glfw.h	/^   #define CALLBACK$/;"	d
CALLBACK	glfw.h	/^  #define CALLBACK /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -O3 -flto -Wall $(shell pkg-config --cflags --libs libglfw) -std=gnu99$/;"	m
CONST_TIME	build_config.h	/^#define CONST_TIME /;"	d
DARKEN_STEP	build_config.h	/^#define DARKEN_STEP /;"	d
DRAW_BIG	build_config.h	/^#define DRAW_BIG /;"	d
DRAW_DARKEN	build_config.h	/^#define DRAW_DARKEN /;"	d
DRAW_QUADS	build_config.h	/^#define DRAW_QUADS /;"	d
DRAW_SOLID	build_config.h	/^#define DRAW_SOLID /;"	d
Data	glfw.h	/^    unsigned char *Data;$/;"	m	struct:__anon7
FAILURE	main.c	/^#define FAILURE /;"	d	file:
Format	glfw.h	/^    int Format;$/;"	m	struct:__anon7
GALAXY_NUM	build_config.h	/^#define GALAXY_NUM /;"	d
GALAXY_SIZE	build_config.h	/^#define GALAXY_SIZE /;"	d
GLFWAPI	glfw.h	/^  #define GLFWAPI /;"	d
GLFWAPI	glfw.h	/^ #define GLFWAPI /;"	d
GLFWAPI	glfw.h	/^ #define GLFWAPI$/;"	d
GLFWAPIENTRY	glfw.h	/^ #define GLFWAPIENTRY /;"	d
GLFWAPIENTRY	glfw.h	/^ #define GLFWAPIENTRY$/;"	d
GLFWCALL	glfw.h	/^ #define GLFWCALL /;"	d
GLFWCALL	glfw.h	/^ #define GLFWCALL$/;"	d
GLFW_ACCELERATED	glfw.h	/^#define GLFW_ACCELERATED /;"	d
GLFW_ACCUM_ALPHA_BITS	glfw.h	/^#define GLFW_ACCUM_ALPHA_BITS /;"	d
GLFW_ACCUM_BLUE_BITS	glfw.h	/^#define GLFW_ACCUM_BLUE_BITS /;"	d
GLFW_ACCUM_GREEN_BITS	glfw.h	/^#define GLFW_ACCUM_GREEN_BITS /;"	d
GLFW_ACCUM_RED_BITS	glfw.h	/^#define GLFW_ACCUM_RED_BITS /;"	d
GLFW_ACTIVE	glfw.h	/^#define GLFW_ACTIVE /;"	d
GLFW_ALPHA_BITS	glfw.h	/^#define GLFW_ALPHA_BITS /;"	d
GLFW_ALPHA_MAP_BIT	glfw.h	/^#define GLFW_ALPHA_MAP_BIT /;"	d
GLFW_AUTO_POLL_EVENTS	glfw.h	/^#define GLFW_AUTO_POLL_EVENTS /;"	d
GLFW_AUX_BUFFERS	glfw.h	/^#define GLFW_AUX_BUFFERS /;"	d
GLFW_AXES	glfw.h	/^#define GLFW_AXES /;"	d
GLFW_BLUE_BITS	glfw.h	/^#define GLFW_BLUE_BITS /;"	d
GLFW_BUILD_MIPMAPS_BIT	glfw.h	/^#define GLFW_BUILD_MIPMAPS_BIT /;"	d
GLFW_BUTTONS	glfw.h	/^#define GLFW_BUTTONS /;"	d
GLFW_DEPTH_BITS	glfw.h	/^#define GLFW_DEPTH_BITS /;"	d
GLFW_FSAA_SAMPLES	glfw.h	/^#define GLFW_FSAA_SAMPLES /;"	d
GLFW_FULLSCREEN	glfw.h	/^#define GLFW_FULLSCREEN /;"	d
GLFW_GREEN_BITS	glfw.h	/^#define GLFW_GREEN_BITS /;"	d
GLFW_ICONIFIED	glfw.h	/^#define GLFW_ICONIFIED /;"	d
GLFW_INFINITY	glfw.h	/^#define GLFW_INFINITY /;"	d
GLFW_JOYSTICK_1	glfw.h	/^#define GLFW_JOYSTICK_1 /;"	d
GLFW_JOYSTICK_10	glfw.h	/^#define GLFW_JOYSTICK_10 /;"	d
GLFW_JOYSTICK_11	glfw.h	/^#define GLFW_JOYSTICK_11 /;"	d
GLFW_JOYSTICK_12	glfw.h	/^#define GLFW_JOYSTICK_12 /;"	d
GLFW_JOYSTICK_13	glfw.h	/^#define GLFW_JOYSTICK_13 /;"	d
GLFW_JOYSTICK_14	glfw.h	/^#define GLFW_JOYSTICK_14 /;"	d
GLFW_JOYSTICK_15	glfw.h	/^#define GLFW_JOYSTICK_15 /;"	d
GLFW_JOYSTICK_16	glfw.h	/^#define GLFW_JOYSTICK_16 /;"	d
GLFW_JOYSTICK_2	glfw.h	/^#define GLFW_JOYSTICK_2 /;"	d
GLFW_JOYSTICK_3	glfw.h	/^#define GLFW_JOYSTICK_3 /;"	d
GLFW_JOYSTICK_4	glfw.h	/^#define GLFW_JOYSTICK_4 /;"	d
GLFW_JOYSTICK_5	glfw.h	/^#define GLFW_JOYSTICK_5 /;"	d
GLFW_JOYSTICK_6	glfw.h	/^#define GLFW_JOYSTICK_6 /;"	d
GLFW_JOYSTICK_7	glfw.h	/^#define GLFW_JOYSTICK_7 /;"	d
GLFW_JOYSTICK_8	glfw.h	/^#define GLFW_JOYSTICK_8 /;"	d
GLFW_JOYSTICK_9	glfw.h	/^#define GLFW_JOYSTICK_9 /;"	d
GLFW_JOYSTICK_LAST	glfw.h	/^#define GLFW_JOYSTICK_LAST /;"	d
GLFW_KEY_BACKSPACE	glfw.h	/^#define GLFW_KEY_BACKSPACE /;"	d
GLFW_KEY_CAPS_LOCK	glfw.h	/^#define GLFW_KEY_CAPS_LOCK /;"	d
GLFW_KEY_DEL	glfw.h	/^#define GLFW_KEY_DEL /;"	d
GLFW_KEY_DOWN	glfw.h	/^#define GLFW_KEY_DOWN /;"	d
GLFW_KEY_END	glfw.h	/^#define GLFW_KEY_END /;"	d
GLFW_KEY_ENTER	glfw.h	/^#define GLFW_KEY_ENTER /;"	d
GLFW_KEY_ESC	glfw.h	/^#define GLFW_KEY_ESC /;"	d
GLFW_KEY_F1	glfw.h	/^#define GLFW_KEY_F1 /;"	d
GLFW_KEY_F10	glfw.h	/^#define GLFW_KEY_F10 /;"	d
GLFW_KEY_F11	glfw.h	/^#define GLFW_KEY_F11 /;"	d
GLFW_KEY_F12	glfw.h	/^#define GLFW_KEY_F12 /;"	d
GLFW_KEY_F13	glfw.h	/^#define GLFW_KEY_F13 /;"	d
GLFW_KEY_F14	glfw.h	/^#define GLFW_KEY_F14 /;"	d
GLFW_KEY_F15	glfw.h	/^#define GLFW_KEY_F15 /;"	d
GLFW_KEY_F16	glfw.h	/^#define GLFW_KEY_F16 /;"	d
GLFW_KEY_F17	glfw.h	/^#define GLFW_KEY_F17 /;"	d
GLFW_KEY_F18	glfw.h	/^#define GLFW_KEY_F18 /;"	d
GLFW_KEY_F19	glfw.h	/^#define GLFW_KEY_F19 /;"	d
GLFW_KEY_F2	glfw.h	/^#define GLFW_KEY_F2 /;"	d
GLFW_KEY_F20	glfw.h	/^#define GLFW_KEY_F20 /;"	d
GLFW_KEY_F21	glfw.h	/^#define GLFW_KEY_F21 /;"	d
GLFW_KEY_F22	glfw.h	/^#define GLFW_KEY_F22 /;"	d
GLFW_KEY_F23	glfw.h	/^#define GLFW_KEY_F23 /;"	d
GLFW_KEY_F24	glfw.h	/^#define GLFW_KEY_F24 /;"	d
GLFW_KEY_F25	glfw.h	/^#define GLFW_KEY_F25 /;"	d
GLFW_KEY_F3	glfw.h	/^#define GLFW_KEY_F3 /;"	d
GLFW_KEY_F4	glfw.h	/^#define GLFW_KEY_F4 /;"	d
GLFW_KEY_F5	glfw.h	/^#define GLFW_KEY_F5 /;"	d
GLFW_KEY_F6	glfw.h	/^#define GLFW_KEY_F6 /;"	d
GLFW_KEY_F7	glfw.h	/^#define GLFW_KEY_F7 /;"	d
GLFW_KEY_F8	glfw.h	/^#define GLFW_KEY_F8 /;"	d
GLFW_KEY_F9	glfw.h	/^#define GLFW_KEY_F9 /;"	d
GLFW_KEY_HOME	glfw.h	/^#define GLFW_KEY_HOME /;"	d
GLFW_KEY_INSERT	glfw.h	/^#define GLFW_KEY_INSERT /;"	d
GLFW_KEY_KP_0	glfw.h	/^#define GLFW_KEY_KP_0 /;"	d
GLFW_KEY_KP_1	glfw.h	/^#define GLFW_KEY_KP_1 /;"	d
GLFW_KEY_KP_2	glfw.h	/^#define GLFW_KEY_KP_2 /;"	d
GLFW_KEY_KP_3	glfw.h	/^#define GLFW_KEY_KP_3 /;"	d
GLFW_KEY_KP_4	glfw.h	/^#define GLFW_KEY_KP_4 /;"	d
GLFW_KEY_KP_5	glfw.h	/^#define GLFW_KEY_KP_5 /;"	d
GLFW_KEY_KP_6	glfw.h	/^#define GLFW_KEY_KP_6 /;"	d
GLFW_KEY_KP_7	glfw.h	/^#define GLFW_KEY_KP_7 /;"	d
GLFW_KEY_KP_8	glfw.h	/^#define GLFW_KEY_KP_8 /;"	d
GLFW_KEY_KP_9	glfw.h	/^#define GLFW_KEY_KP_9 /;"	d
GLFW_KEY_KP_ADD	glfw.h	/^#define GLFW_KEY_KP_ADD /;"	d
GLFW_KEY_KP_DECIMAL	glfw.h	/^#define GLFW_KEY_KP_DECIMAL /;"	d
GLFW_KEY_KP_DIVIDE	glfw.h	/^#define GLFW_KEY_KP_DIVIDE /;"	d
GLFW_KEY_KP_ENTER	glfw.h	/^#define GLFW_KEY_KP_ENTER /;"	d
GLFW_KEY_KP_EQUAL	glfw.h	/^#define GLFW_KEY_KP_EQUAL /;"	d
GLFW_KEY_KP_MULTIPLY	glfw.h	/^#define GLFW_KEY_KP_MULTIPLY /;"	d
GLFW_KEY_KP_NUM_LOCK	glfw.h	/^#define GLFW_KEY_KP_NUM_LOCK /;"	d
GLFW_KEY_KP_SUBTRACT	glfw.h	/^#define GLFW_KEY_KP_SUBTRACT /;"	d
GLFW_KEY_LALT	glfw.h	/^#define GLFW_KEY_LALT /;"	d
GLFW_KEY_LAST	glfw.h	/^#define GLFW_KEY_LAST /;"	d
GLFW_KEY_LCTRL	glfw.h	/^#define GLFW_KEY_LCTRL /;"	d
GLFW_KEY_LEFT	glfw.h	/^#define GLFW_KEY_LEFT /;"	d
GLFW_KEY_LSHIFT	glfw.h	/^#define GLFW_KEY_LSHIFT /;"	d
GLFW_KEY_LSUPER	glfw.h	/^#define GLFW_KEY_LSUPER /;"	d
GLFW_KEY_MENU	glfw.h	/^#define GLFW_KEY_MENU /;"	d
GLFW_KEY_PAGEDOWN	glfw.h	/^#define GLFW_KEY_PAGEDOWN /;"	d
GLFW_KEY_PAGEUP	glfw.h	/^#define GLFW_KEY_PAGEUP /;"	d
GLFW_KEY_PAUSE	glfw.h	/^#define GLFW_KEY_PAUSE /;"	d
GLFW_KEY_RALT	glfw.h	/^#define GLFW_KEY_RALT /;"	d
GLFW_KEY_RCTRL	glfw.h	/^#define GLFW_KEY_RCTRL /;"	d
GLFW_KEY_REPEAT	glfw.h	/^#define GLFW_KEY_REPEAT /;"	d
GLFW_KEY_RIGHT	glfw.h	/^#define GLFW_KEY_RIGHT /;"	d
GLFW_KEY_RSHIFT	glfw.h	/^#define GLFW_KEY_RSHIFT /;"	d
GLFW_KEY_RSUPER	glfw.h	/^#define GLFW_KEY_RSUPER /;"	d
GLFW_KEY_SCROLL_LOCK	glfw.h	/^#define GLFW_KEY_SCROLL_LOCK /;"	d
GLFW_KEY_SPACE	glfw.h	/^#define GLFW_KEY_SPACE /;"	d
GLFW_KEY_SPECIAL	glfw.h	/^#define GLFW_KEY_SPECIAL /;"	d
GLFW_KEY_TAB	glfw.h	/^#define GLFW_KEY_TAB /;"	d
GLFW_KEY_UNKNOWN	glfw.h	/^#define GLFW_KEY_UNKNOWN /;"	d
GLFW_KEY_UP	glfw.h	/^#define GLFW_KEY_UP /;"	d
GLFW_MOUSE_BUTTON_1	glfw.h	/^#define GLFW_MOUSE_BUTTON_1 /;"	d
GLFW_MOUSE_BUTTON_2	glfw.h	/^#define GLFW_MOUSE_BUTTON_2 /;"	d
GLFW_MOUSE_BUTTON_3	glfw.h	/^#define GLFW_MOUSE_BUTTON_3 /;"	d
GLFW_MOUSE_BUTTON_4	glfw.h	/^#define GLFW_MOUSE_BUTTON_4 /;"	d
GLFW_MOUSE_BUTTON_5	glfw.h	/^#define GLFW_MOUSE_BUTTON_5 /;"	d
GLFW_MOUSE_BUTTON_6	glfw.h	/^#define GLFW_MOUSE_BUTTON_6 /;"	d
GLFW_MOUSE_BUTTON_7	glfw.h	/^#define GLFW_MOUSE_BUTTON_7 /;"	d
GLFW_MOUSE_BUTTON_8	glfw.h	/^#define GLFW_MOUSE_BUTTON_8 /;"	d
GLFW_MOUSE_BUTTON_LAST	glfw.h	/^#define GLFW_MOUSE_BUTTON_LAST /;"	d
GLFW_MOUSE_BUTTON_LEFT	glfw.h	/^#define GLFW_MOUSE_BUTTON_LEFT /;"	d
GLFW_MOUSE_BUTTON_MIDDLE	glfw.h	/^#define GLFW_MOUSE_BUTTON_MIDDLE /;"	d
GLFW_MOUSE_BUTTON_RIGHT	glfw.h	/^#define GLFW_MOUSE_BUTTON_RIGHT /;"	d
GLFW_MOUSE_CURSOR	glfw.h	/^#define GLFW_MOUSE_CURSOR /;"	d
GLFW_NOWAIT	glfw.h	/^#define GLFW_NOWAIT /;"	d
GLFW_NO_RESCALE_BIT	glfw.h	/^#define GLFW_NO_RESCALE_BIT /;"	d
GLFW_OPENED	glfw.h	/^#define GLFW_OPENED /;"	d
GLFW_OPENGL_COMPAT_PROFILE	glfw.h	/^#define GLFW_OPENGL_COMPAT_PROFILE /;"	d
GLFW_OPENGL_CORE_PROFILE	glfw.h	/^#define GLFW_OPENGL_CORE_PROFILE /;"	d
GLFW_OPENGL_DEBUG_CONTEXT	glfw.h	/^#define GLFW_OPENGL_DEBUG_CONTEXT /;"	d
GLFW_OPENGL_FORWARD_COMPAT	glfw.h	/^#define GLFW_OPENGL_FORWARD_COMPAT /;"	d
GLFW_OPENGL_PROFILE	glfw.h	/^#define GLFW_OPENGL_PROFILE /;"	d
GLFW_OPENGL_VERSION_MAJOR	glfw.h	/^#define GLFW_OPENGL_VERSION_MAJOR /;"	d
GLFW_OPENGL_VERSION_MINOR	glfw.h	/^#define GLFW_OPENGL_VERSION_MINOR /;"	d
GLFW_ORIGIN_UL_BIT	glfw.h	/^#define GLFW_ORIGIN_UL_BIT /;"	d
GLFW_PRESENT	glfw.h	/^#define GLFW_PRESENT /;"	d
GLFW_PRESS	glfw.h	/^#define GLFW_PRESS /;"	d
GLFW_RED_BITS	glfw.h	/^#define GLFW_RED_BITS /;"	d
GLFW_REFRESH_RATE	glfw.h	/^#define GLFW_REFRESH_RATE /;"	d
GLFW_RELEASE	glfw.h	/^#define GLFW_RELEASE /;"	d
GLFW_STENCIL_BITS	glfw.h	/^#define GLFW_STENCIL_BITS /;"	d
GLFW_STEREO	glfw.h	/^#define GLFW_STEREO /;"	d
GLFW_STICKY_KEYS	glfw.h	/^#define GLFW_STICKY_KEYS /;"	d
GLFW_STICKY_MOUSE_BUTTONS	glfw.h	/^#define GLFW_STICKY_MOUSE_BUTTONS /;"	d
GLFW_SYSTEM_KEYS	glfw.h	/^#define GLFW_SYSTEM_KEYS /;"	d
GLFW_VERSION_MAJOR	glfw.h	/^#define GLFW_VERSION_MAJOR /;"	d
GLFW_VERSION_MINOR	glfw.h	/^#define GLFW_VERSION_MINOR /;"	d
GLFW_VERSION_REVISION	glfw.h	/^#define GLFW_VERSION_REVISION /;"	d
GLFW_WAIT	glfw.h	/^#define GLFW_WAIT /;"	d
GLFW_WINDOW	glfw.h	/^#define GLFW_WINDOW /;"	d
GLFW_WINDOW_NO_RESIZE	glfw.h	/^#define GLFW_WINDOW_NO_RESIZE /;"	d
GLFWcharfun	glfw.h	/^typedef void (GLFWCALL * GLFWcharfun)(int,int);$/;"	t
GLFWcond	glfw.h	/^typedef void * GLFWcond;$/;"	t
GLFWimage	glfw.h	/^} GLFWimage;$/;"	t	typeref:struct:__anon7
GLFWkeyfun	glfw.h	/^typedef void (GLFWCALL * GLFWkeyfun)(int,int);$/;"	t
GLFWmousebuttonfun	glfw.h	/^typedef void (GLFWCALL * GLFWmousebuttonfun)(int,int);$/;"	t
GLFWmouseposfun	glfw.h	/^typedef void (GLFWCALL * GLFWmouseposfun)(int,int);$/;"	t
GLFWmousewheelfun	glfw.h	/^typedef void (GLFWCALL * GLFWmousewheelfun)(int);$/;"	t
GLFWmutex	glfw.h	/^typedef void * GLFWmutex;$/;"	t
GLFWthread	glfw.h	/^typedef int GLFWthread;$/;"	t
GLFWthreadfun	glfw.h	/^typedef void (GLFWCALL * GLFWthreadfun)(void *);$/;"	t
GLFWvidmode	glfw.h	/^} GLFWvidmode;$/;"	t	typeref:struct:__anon6
GLFWwindowclosefun	glfw.h	/^typedef int  (GLFWCALL * GLFWwindowclosefun)(void);$/;"	t
GLFWwindowrefreshfun	glfw.h	/^typedef void (GLFWCALL * GLFWwindowrefreshfun)(void);$/;"	t
GLFWwindowsizefun	glfw.h	/^typedef void (GLFWCALL * GLFWwindowsizefun)(int,int);$/;"	t
GLU_CALLBACK_DEFINED	glfw.h	/^ #define GLU_CALLBACK_DEFINED$/;"	d
GL_APIENTRY_DEFINED	glfw.h	/^ #define GL_APIENTRY_DEFINED$/;"	d
GL_GLEXT_LEGACY	glfw.h	/^  #define GL_GLEXT_LEGACY$/;"	d
GL_WINGDIAPI_DEFINED	glfw.h	/^ #define GL_WINGDIAPI_DEFINED$/;"	d
GS_FLOAT	build_config.h	/^#define GS_FLOAT /;"	d
GS_INLINE	build_config.h	/^#define GS_INLINE /;"	d
G_CONST	build_config.h	/^#define G_CONST /;"	d
GravitySim_QuadTree_h	quad_tree.h	/^#define GravitySim_QuadTree_h$/;"	d
GravitySim_build_config_h	build_config.h	/^#define GravitySim_build_config_h$/;"	d
GravitySim_drawing_h	drawing.h	/^#define GravitySim_drawing_h$/;"	d
GravitySim_graphic_types_h	basic_types.h	/^#define GravitySim_graphic_types_h$/;"	d
GravitySim_object_array_h	object_array.h	/^#define GravitySim_object_array_h$/;"	d
GravitySim_object_h	object.h	/^#define GravitySim_object_h$/;"	d
GravitySim_screen_h	screen.h	/^#define GravitySim_screen_h$/;"	d
GravitySim_space_controller_h	space_controller.h	/^#define GravitySim_space_controller_h$/;"	d
GravitySim_space_model_h	space_model.h	/^#define GravitySim_space_model_h$/;"	d
GravitySim_space_view_h	space_view.h	/^#define GravitySim_space_view_h$/;"	d
GreenBits	glfw.h	/^    int RedBits, BlueBits, GreenBits;$/;"	m	struct:__anon6
Height	glfw.h	/^    int Width, Height;$/;"	m	struct:__anon6
Height	glfw.h	/^    int Width, Height;$/;"	m	struct:__anon7
MAX	basic_types.h	/^#define MAX(/;"	d
MAX_FPS	build_config.h	/^#define MAX_FPS /;"	d
MAX_MASS	build_config.h	/^#define MAX_MASS /;"	d
MAX_SPEED	build_config.h	/^#define MAX_SPEED /;"	d
MIN	basic_types.h	/^#define MIN(/;"	d
MODEL_BOUNDS	build_config.h	/^#define MODEL_BOUNDS /;"	d
NULL	glfw.h	/^  #define NULL /;"	d
OBJECT_NUM	build_config.h	/^#define OBJECT_NUM /;"	d
Object	object.h	/^} Object;$/;"	t	typeref:struct:__anon8
ObjectArray	object_array.h	/^} ObjectArray;$/;"	t	typeref:struct:__anon9
PRINT_FPS	build_config.h	/^#define PRINT_FPS /;"	d
Point2D	basic_types.h	/^} Point2D;$/;"	t	typeref:struct:__anon3
PointI	basic_types.h	/^} PointI;$/;"	t	typeref:struct:__anon1
QuadTree	quad_tree.h	/^} QuadTree;$/;"	t	typeref:struct:quadtree_t
RGBColor	basic_types.h	/^} RGBColor;$/;"	t	typeref:struct:__anon5
RGB_BLACK	basic_types.h	/^#define RGB_BLACK /;"	d
RGB_BLUE	basic_types.h	/^#define RGB_BLUE /;"	d
RGB_GREEN	basic_types.h	/^#define RGB_GREEN /;"	d
RGB_RED	basic_types.h	/^#define RGB_RED /;"	d
RGB_WHITE	basic_types.h	/^#define RGB_WHITE /;"	d
RectangleD	basic_types.h	/^} RectangleD;$/;"	t	typeref:struct:__anon4
RectangleI	basic_types.h	/^} RectangleI;$/;"	t	typeref:struct:__anon2
RedBits	glfw.h	/^    int RedBits, BlueBits, GreenBits;$/;"	m	struct:__anon6
SD_TRESHOLD	build_config.h	/^#define SD_TRESHOLD /;"	d
SOFT_CONST	build_config.h	/^#define SOFT_CONST /;"	d
SQUARE	basic_types.h	/^#define SQUARE(/;"	d
SUCCESS	main.c	/^#define SUCCESS /;"	d	file:
Screen	screen.h	/^} Screen;$/;"	t	typeref:struct:__anon10
SimulationConfig	space_controller.h	/^} SimulationConfig;$/;"	t	typeref:struct:__anon11
SpaceController	space_controller.h	/^} SpaceController;$/;"	t	typeref:struct:__anon12
SpaceModel	space_model.h	/^} SpaceModel;$/;"	t	typeref:struct:__anon13
SpaceView	space_view.h	/^} SpaceView;$/;"	t	typeref:struct:__anon14
WINDOW_BOUNDS	build_config.h	/^#define WINDOW_BOUNDS /;"	d
WINDOW_H	build_config.h	/^#define WINDOW_H /;"	d
WINDOW_TITLE	main.c	/^#define WINDOW_TITLE /;"	d	file:
WINDOW_W	build_config.h	/^#define WINDOW_W /;"	d
WINGDIAPI	glfw.h	/^  #define WINGDIAPI /;"	d
Width	glfw.h	/^    int Width, Height;$/;"	m	struct:__anon6
Width	glfw.h	/^    int Width, Height;$/;"	m	struct:__anon7
_WCHAR_T_DEFINED	glfw.h	/^ #define _WCHAR_T_DEFINED$/;"	d
_WIN32	glfw.h	/^ #define _WIN32$/;"	d
__glfw_h_	glfw.h	/^#define __glfw_h_$/;"	d
blue	basic_types.h	/^    float blue;$/;"	m	struct:__anon5
bounds	quad_tree.h	/^    RectangleD bounds;$/;"	m	struct:quadtree_t
bounds	space_model.h	/^    RectangleD bounds;$/;"	m	struct:__anon13
capacity	object_array.h	/^    size_t capacity;$/;"	m	struct:__anon9
cartesian_to_polar	basic_types.c	/^void cartesian_to_polar(Point2D p,  GS_FLOAT *r, GS_FLOAT *theta) {$/;"	f
children	quad_tree.h	/^    struct quadtree_t *children[4];$/;"	m	struct:quadtree_t	typeref:struct:quadtree_t::quadtree_t
com	quad_tree.h	/^    Object com;$/;"	m	struct:quadtree_t
draw_darken_pixel	drawing.c	/^void draw_darken_pixel(Screen *screen, int x, int y, float step) {$/;"	f
draw_darken_pixel_bw	drawing.c	/^void draw_darken_pixel_bw(Screen *screen, int x, int y, float step) {$/;"	f
draw_empty_rectangle	drawing.c	/^void draw_empty_rectangle(Screen *screen, RectangleD rect, RGBColor color) {$/;"	f
draw_get_pixel	drawing.c	/^GS_INLINE RGBColor draw_get_pixel(Screen *screen, int x, int y) {$/;"	f
draw_lighten_pixel	drawing.c	/^void draw_lighten_pixel(Screen *screen, int x, int y, float step) {$/;"	f
draw_rectangle	drawing.c	/^void draw_rectangle(Screen *screen, RectangleI r, RGBColor color) {$/;"	f
draw_set_pixel	drawing.c	/^GS_INLINE void draw_set_pixel(Screen *screen, int x, int y, RGBColor color) {$/;"	f
fastPow	basic_types.c	/^double fastPow(double a, double b) {$/;"	f
galaxies_n	space_controller.h	/^    size_t galaxies_n;$/;"	m	struct:__anon11
galaxy_size	space_controller.h	/^    GS_FLOAT galaxy_size;$/;"	m	struct:__anon11
get_config	main.c	/^SimulationConfig get_config(int argc, const char *argv[]) {$/;"	f
gl_close	main.c	/^static void gl_close(void) {$/;"	f	file:
gl_init	main.c	/^static int gl_init(int width, int height, const char *title) {$/;"	f	file:
green	basic_types.h	/^    float green;$/;"	m	struct:__anon5
has_children	quad_tree.h	/^    char has_children;$/;"	m	struct:quadtree_t
height	screen.h	/^    int height;$/;"	m	struct:__anon10
len	object_array.h	/^    size_t len;$/;"	m	struct:__anon9
main	main.c	/^int main(int argc, const char * argv[]) {$/;"	f
main_loop	main.c	/^bool main_loop(SpaceController *controller) {$/;"	f
mass	object.h	/^    GS_FLOAT mass;$/;"	m	struct:__anon8
middle	basic_types.h	/^    Point2D middle;$/;"	m	struct:__anon4
model	space_controller.h	/^    SpaceModel *model;$/;"	m	struct:__anon12
model_bounds	space_controller.h	/^    RectangleD model_bounds;$/;"	m	struct:__anon11
object	quad_tree.h	/^    Object *object;$/;"	m	struct:quadtree_t
object_add	object.c	/^Object object_add(Object a, Object b) {$/;"	f
object_calculate_force	object.c	/^Point2D object_calculate_force(Object a, Object b) {$/;"	f
object_make	object.c	/^Object object_make(Point2D position, Point2D speed, GS_FLOAT mass) {$/;"	f
object_make_random	object.c	/^Object object_make_random(RectangleD bounds, GS_FLOAT max_speed, GS_FLOAT max_mass) {$/;"	f
object_make_random_in_ellipse	object.c	/^Object object_make_random_in_ellipse(RectangleD bounds, GS_FLOAT max_speed, GS_FLOAT max_mass) {$/;"	f
object_update_position	object.c	/^void object_update_position(Object *object, GS_FLOAT dt) {$/;"	f
object_zero	object.c	/^Object object_zero() {$/;"	f
objectarray_add	object_array.c	/^void objectarray_add(ObjectArray *array, Object object) {$/;"	f
objectarray_dealloc	object_array.c	/^void objectarray_dealloc(ObjectArray *array) {$/;"	f
objectarray_init_empty	object_array.c	/^ObjectArray* objectarray_init_empty(size_t capacity) {$/;"	f
objectarray_remove_object_at	object_array.c	/^void objectarray_remove_object_at(ObjectArray *array, size_t i) {$/;"	f
objects	object_array.h	/^    Object *objects;$/;"	m	struct:__anon9
objects	space_model.h	/^    ObjectArray *objects;$/;"	m	struct:__anon13
objects_n	space_controller.h	/^    size_t objects_n;$/;"	m	struct:__anon11
origin	basic_types.h	/^    Point2D origin;$/;"	m	struct:__anon4
origin	basic_types.h	/^    PointI origin;$/;"	m	struct:__anon2
pixels	screen.h	/^    RGBColor *pixels;$/;"	m	struct:__anon10
point2d_add	basic_types.h	/^static GS_INLINE Point2D point2d_add(Point2D a, Point2D b) {$/;"	f
point2d_is_in_rectangled	basic_types.h	/^static GS_INLINE int point2d_is_in_rectangled(Point2D point, RectangleD rect) {$/;"	f
point2d_length	basic_types.h	/^static GS_INLINE  GS_FLOAT point2d_length(Point2D p) {$/;"	f
point2d_make	basic_types.h	/^static GS_INLINE Point2D point2d_make(GS_FLOAT x, GS_FLOAT y) {$/;"	f
point2d_make_random	basic_types.c	/^Point2D point2d_make_random(RectangleD bounds) {$/;"	f
point2d_make_random_in_circle	basic_types.c	/^Point2D point2d_make_random_in_circle(RectangleD b) {$/;"	f
point2d_multiply	basic_types.h	/^static GS_INLINE Point2D point2d_multiply(Point2D a, GS_FLOAT x) {$/;"	f
point2d_nquad_of_rectangled	basic_types.h	/^static GS_INLINE int point2d_nquad_of_rectangled(Point2D p, RectangleD r) {$/;"	f
point2d_rotate_90_ccw	basic_types.h	/^static GS_INLINE Point2D point2d_rotate_90_ccw(Point2D p) {$/;"	f
point2d_sub	basic_types.h	/^static GS_INLINE Point2D point2d_sub(Point2D a, Point2D b) {$/;"	f
point2d_unit	basic_types.h	/^static GS_INLINE  Point2D point2d_unit(Point2D p) {$/;"	f
point2d_zero	basic_types.h	/^static GS_INLINE Point2D point2d_zero() {$/;"	f
pointi_make	basic_types.h	/^static GS_INLINE PointI pointi_make(int x, int y) {$/;"	f
polar_to_cartesian	basic_types.c	/^Point2D polar_to_cartesian(GS_FLOAT r, GS_FLOAT theta) {$/;"	f
position	object.h	/^    Point2D position;$/;"	m	struct:__anon8
print_usage	main.c	/^void print_usage(const char *program_name) {$/;"	f
quadtree_add_object	quad_tree.c	/^void quadtree_add_object(QuadTree *tree, Object *object) {$/;"	f
quadtree_add_objects	quad_tree.c	/^void quadtree_add_objects(QuadTree *tree, ObjectArray *objects) {$/;"	f
quadtree_apply_to_objects	quad_tree.c	/^void quadtree_apply_to_objects(QuadTree *tree, ObjectArray *objects, GS_FLOAT dt) {$/;"	f
quadtree_dealloc	quad_tree.c	/^void quadtree_dealloc(QuadTree *tree) {$/;"	f
quadtree_get_force_on_object	quad_tree.c	/^Point2D quadtree_get_force_on_object(QuadTree *tree, Object *object) {$/;"	f
quadtree_init	quad_tree.c	/^QuadTree* quadtree_init(RectangleD bounds) {$/;"	f
quadtree_t	quad_tree.h	/^typedef struct quadtree_t {$/;"	s
rectangled_make	basic_types.h	/^static GS_INLINE RectangleD rectangled_make(GS_FLOAT x, GS_FLOAT y, GS_FLOAT size_x, GS_FLOAT size_y) {$/;"	f
rectangled_make_with_point2ds	basic_types.h	/^static GS_INLINE RectangleD rectangled_make_with_point2ds(Point2D origin, Point2D size) {$/;"	f
rectangled_nquad	basic_types.h	/^static GS_INLINE RectangleD rectangled_nquad(RectangleD rect, int quarter) {$/;"	f
rectanglei_make	basic_types.h	/^static GS_INLINE RectangleI rectanglei_make(int x1, int y1, int x2, int y2) {$/;"	f
rectanglei_make_with_points	basic_types.h	/^static GS_INLINE RectangleI rectanglei_make_with_points(PointI origin, PointI size) {$/;"	f
red	basic_types.h	/^    float red;$/;"	m	struct:__anon5
rgbcolor_make	basic_types.h	/^static GS_INLINE RGBColor rgbcolor_make(float red, float green, float blue) {$/;"	f
screen	space_view.h	/^    Screen *screen;$/;"	m	struct:__anon14
screen_dealloc	screen.c	/^void screen_dealloc(Screen *screen) {$/;"	f
screen_display	screen.c	/^void screen_display(Screen *screen) {$/;"	f
screen_fill	screen.c	/^void screen_fill(Screen *screen, RGBColor color) {$/;"	f
screen_init	screen.c	/^Screen *screen_init(int width, int height) {$/;"	f
size	basic_types.h	/^    Point2D size;$/;"	m	struct:__anon4
size	basic_types.h	/^    PointI size;$/;"	m	struct:__anon2
spacecontroller_dealloc	space_controller.c	/^void spacecontroller_dealloc(SpaceController *controller) {$/;"	f
spacecontroller_init	space_controller.c	/^SpaceController* spacecontroller_init(SimulationConfig config) {$/;"	f
spacecontroller_update	space_controller.c	/^void spacecontroller_update(SpaceController *c, GS_FLOAT dt) {$/;"	f
spacemodel_add_galaxy	space_model.c	/^void spacemodel_add_galaxy(SpaceModel *m, Point2D position, GS_FLOAT size, size_t n) {$/;"	f
spacemodel_dealloc	space_model.c	/^void spacemodel_dealloc(SpaceModel *m) {$/;"	f
spacemodel_init_empty	space_model.c	/^SpaceModel* spacemodel_init_empty(RectangleD bounds, size_t capacity) {$/;"	f
spacemodel_init_galaxies	space_model.c	/^SpaceModel* spacemodel_init_galaxies(RectangleD bounds, RectangleD galaxies_bounds, size_t n_galaxies,$/;"	f
spacemodel_remove_objects_outside_bounds	space_model.c	/^void spacemodel_remove_objects_outside_bounds(SpaceModel *m) {$/;"	f
spacemodel_update	space_model.c	/^void spacemodel_update(SpaceModel *m, GS_FLOAT dt) {$/;"	f
spaceview_clear	space_view.c	/^void spaceview_clear(SpaceView *view) {    $/;"	f
spaceview_dealloc	space_view.c	/^void spaceview_dealloc(SpaceView *view) {$/;"	f
spaceview_display	space_view.c	/^void spaceview_display(SpaceView *view) {$/;"	f
spaceview_draw_objects	space_view.c	/^void spaceview_draw_objects(SpaceView *view, ObjectArray *objects) {$/;"	f
spaceview_draw_quadtree	space_view.c	/^void spaceview_draw_quadtree(SpaceView *view, QuadTree *tree) {$/;"	f
spaceview_init	space_view.c	/^SpaceView * spaceview_init(RectangleD bounds) {$/;"	f
speed	object.h	/^    Point2D speed;$/;"	m	struct:__anon8
tree	space_model.h	/^    QuadTree *tree;$/;"	m	struct:__anon13
view	space_controller.h	/^    SpaceView *view;$/;"	m	struct:__anon12
view_bounds	space_controller.h	/^    RectangleD view_bounds;$/;"	m	struct:__anon11
width	screen.h	/^    int width;$/;"	m	struct:__anon10
x	basic_types.h	/^    GS_FLOAT x;$/;"	m	struct:__anon3
x	basic_types.h	/^    int x;$/;"	m	struct:__anon1
y	basic_types.h	/^    GS_FLOAT y;$/;"	m	struct:__anon3
y	basic_types.h	/^    int y;$/;"	m	struct:__anon1
